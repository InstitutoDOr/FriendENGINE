//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace AssemblyCSharp
{
	public class FriendEngineComm
		{
		     protected s_TCP mainThread, responseThread;
			 protected String HostData;
		     protected String checkingValue;
			 protected Int32 Port;
			 protected Int32 actualState = 0;
		     protected Int32 operation = 0;
		     protected string sessionID;
		     protected int actualVolume;
		     protected String actualCommand;
		     protected int runSize;


		     public String lastSessionComandResponse;
		     public String lastGraphResponse;
		     public String lastFeedBack;
		     public String lastFeedBackClass;
		     public double[] feedbackValues; 
		     public int FeedbackFailed;

		   
			 public FriendEngineComm ()
			 {
				   mainThread = new s_TCP();
				   responseThread = new s_TCP();
				   actualState = 0;
			 }
		     
		     public void setupConnection(String host, Int32 port)	{
			       HostData = host;
				   Port = port;
			 }

		     public void setRunsize(int size)	{
				   feedbackValues = new double[size];
			       runSize = size;
			 }

		     public void connect()	{
			      mainThread.setupSocket (HostData, Port);
  			 }

		     // create a new session in Friend Engine
		     public void createSession() {
			     operation = 1;
			     actualState = 1;
			     handleCreateSession();
		     }

		     // Sets the plugin information  
		     public void setupPlugIn() {
			     operation = 2;
			     actualState = 1;
			     handlePlugInSetup();
		     }

		     public void issueCommand(String command)
			 {
 			     actualCommand = command;
			     operation = 3;
			     actualState = 1;
			     handleIssueCommand();
		     }

		     public void getSessionCommandState(String value)
			 {
			     checkingValue = value;
			     operation = 4;
			     actualState = 1;
			     handleGetSessionCommandState();
		     }

		     public void getGraphParams(int volume)
			 {
			     actualVolume = volume;
			     operation = 5;
			     actualState = 1;
			     handleGetGraphParams();
		     }

		     public void getFeedBack(int volume)
			 {
			     actualVolume = volume;
			     operation = 6;
			     actualState = 1;
			     if (volume > runSize)
			     {
				    actualState = 0;
				    FeedbackFailed = 0;
			     }
			     handleGetFeedBack();
		     }

		     public void endSession()
		     {
			     operation = 7;
			     actualState = 1;
			     handleEndSession();
		     }  

 		     public int stateManager()
		     {
			    if (operation == 1)
				   handleCreateSession();

			    if (operation == 2)
			   	   handlePlugInSetup();

			    if (operation == 3)
			   	   handleIssueCommand();

			    if (operation == 4)
			   	   handleGetSessionCommandState();

			    if (operation == 5)
			   	   handleGetGraphParams();

			    if (operation == 6)
			   	   handleGetFeedBack();

			    return operation;
			 }

		     protected virtual void handleCreateSession() 
		     {
			     String response; 
			     if (actualState == 1) {
				    mainThread.writeSocket ("NEWSESSION");
				    actualState = 2;
				 }

			     if (actualState == 2) {
				    sessionID = mainThread.readSocket();
				    if (sessionID != "") actualState = 3;
				 }

			     if (actualState == 3) {
				    response = mainThread.readSocket();
				    if (response != "") actualState = 0;
				 }

			     if (actualState == 0) operation = 0;
			 }

		     protected virtual void writePluginInfo()
		     {
			    mainThread.writeSocket ("PLUGIN");
			    mainThread.writeSocket ("libROI");
			    mainThread.writeSocket ("no");
			    mainThread.writeSocket ("processROI");
			    mainThread.writeSocket ("initializeROIProcessing");
			    mainThread.writeSocket ("finalizeProcessing");
			    mainThread.writeSocket ("no");
			    mainThread.writeSocket ("no");
			 }

		     protected virtual void handlePlugInSetup() 
		     {
			     String response; 
			     if (actualState == 1) {
				    writePluginInfo();
				    actualState = 2;
				 }

			     if (actualState == 2) {
				    response = mainThread.readSocket();
				    if (response != "") actualState = 0;
				 }

			     if (actualState == 0) operation = 0;
			 }

		     protected virtual void handleIssueCommand() 
		     {
			     String response; 
			     if (actualState == 1) {
				    mainThread.writeSocket(actualCommand);
				    actualState = 2;
				 }

			     if (actualState == 2) {
				    response = mainThread.readSocket();
				    if (response != "") actualState = 0;
				 }

			     if (actualState == 0) operation = 0;
			 }

		     protected virtual void handleGetSessionCommandState() 
		     {
			     String response;

			     if (actualState == 1) {
					responseThread.setupSocket(HostData, Port);
	    			responseThread.writeSocket("SESSION");
	    			responseThread.writeSocket(sessionID);
				    actualState = 2;
				 }

			     if (actualState == 2) 
			     {
					 response = responseThread.readSocket();
					 if (response == "OK")
					 {
						responseThread.writeSocket(checkingValue);
					    actualState = 3;
					 }
				     else if (response != "") 
					 {
					    actualState = 0;
					    responseThread.closeSocket();
					    lastSessionComandResponse = response;
				     }
				 }

			     // getting the status of the session command
			     if (actualState == 3)
				 {
					response = responseThread.readSocket();
				    if (response != "") responseThread.closeSocket();
					if (response == "OK") actualState = 0;
				    else actualState = 1;
				    lastSessionComandResponse = response;
				 }

			     if (actualState == 0) operation = 0;
			 }

		     protected virtual void handleGetGraphParams() 
		     {
			     String response; 

			     if (actualState == 1) {
					responseThread.setupSocket(HostData, Port);
					responseThread.writeSocket("SESSION");
					responseThread.writeSocket(sessionID);
				    actualState = 2;
				 }

			     if (actualState == 2) {
					response = responseThread.readSocket();
					if (response == "OK")
					{
						responseThread.writeSocket("GRAPHPARS");
						responseThread.writeSocket(actualVolume.ToString());
					    actualState = 3;
					}
				    else if (response != "") 
					{
					   responseThread.closeSocket();
					   actualState = 0;
					   lastGraphResponse = response;
					}
				    else if ((response == "") && (!responseThread.Connected()))
					{
					   responseThread.closeSocket();
					   actualState = 0;
					   lastGraphResponse = "GRAPHPARS";
					}
				 }

			     if (actualState == 3) {
					response = responseThread.readSocket();
					if (response != "")
					{
					    lastGraphResponse = response;
					    actualState = 4;
					}
				    else if ((response == "") && (!responseThread.Connected()))
					{
					   responseThread.closeSocket();
					   actualState = 0;
					   lastGraphResponse = "GRAPHPARS";
					}
				 }

			     if (actualState == 4) {
					response = responseThread.readSocket();
				    if ((response != "") || (!responseThread.Connected()))
					{
					   responseThread.closeSocket();
					   actualState = 0;
					}
				 }

			     if (actualState == 0) operation = 0;
			 }

		     protected virtual void handleGetFeedBack() 
		     {
			     String response; 
			     if (actualState == 1) {
					responseThread.setupSocket(HostData, Port);
					responseThread.writeSocket("SESSION");
					responseThread.writeSocket(sessionID);
				    FeedbackFailed = 0;
				    actualState = 2;
				 }

			     if (actualState == 2) {
					response = responseThread.readSocket();
					if (response == "OK") 
					{
						responseThread.writeSocket ("TEST");
						responseThread.writeSocket (actualVolume.ToString());
					    actualState = 3;
					} 
				    else if (response != "") 
					{
					   responseThread.closeSocket();
					   actualState = 0;
					   FeedbackFailed = 1;
					   lastGraphResponse = response;
					}
				 }

			     if (actualState == 3) {
					lastFeedBackClass = responseThread.readSocket();
					if (lastFeedBackClass != "") 
					{
					   actualState = 4;
					}
				    else if ((lastFeedBackClass == "") && (!responseThread.Connected()))
					 {
					    responseThread.closeSocket();
					    FeedbackFailed = 1;
					    actualState = 0;
					 }
				 }

			     if (actualState == 4) {
					lastFeedBack = responseThread.readSocket();
					if (lastFeedBack != "") 
					{
					   actualState = 5;
					   feedbackValues[actualVolume-1] = double.Parse(lastFeedBack);
					}
				    else if ((lastFeedBack == "") && (!responseThread.Connected()))
					 {
					    responseThread.closeSocket();
					    actualState = 0;
					    FeedbackFailed = 1;
					 }
				 }

			     if (actualState == 5) {
					 response = responseThread.readSocket();
					 if ((response != "") || (!responseThread.Connected()))
					 {
					    responseThread.closeSocket();
					    actualState = 0;
					 }
				 }

			     if (actualState == 0) operation = 0;
			 }

		     protected virtual void handleEndSession()
		     {
			     String response;
			     int terminate = 0;

			     if (!mainThread.Connected())
				 {
					mainThread.closeSocket();
					actualState = 0;
			     }
			     if (actualState == 1) {
	    			mainThread.writeSocket("ENDSESSION");
	    			mainThread.writeSocket(sessionID);
				    actualState = 2;
				 }

			     if (actualState == 2) 
			     {
					 response = responseThread.readSocket();
					 if (response == "OK") terminate = 1;
				     else if ((response == "") && (!mainThread.Connected())) terminate=1;
				     if (terminate == 1)
				     {
					     mainThread.closeSocket();
					     actualState = 0;
				     }
				 }

			     if (actualState == 0) operation = 0;
		     }
	}
}

