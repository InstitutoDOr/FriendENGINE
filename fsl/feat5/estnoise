#!/bin/sh

#   estnoise - quick and dirty estimate of (temporal) noise in 4D data
#
#   Stephen Smith, FMRIB Image Analysis Group
#
#   Copyright (C) 2005-2007 University of Oxford
#
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#   
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#   
#   
#   LICENCE
#   
#   FMRIB Software Library, Release 4.0 (c) 2007, The University of
#   Oxford (the "Software")
#   
#   The Software remains the property of the University of Oxford ("the
#   University").
#   
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#   
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#   
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#   
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Isis
#   Innovation Limited ("Isis"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   innovation@isis.ox.ac.uk quoting reference DE/1112.

Usage() {
    echo "Usage: estnoise <4d_input_data> [spatial_sigma temp_hp_sigma temp_lp_sigma]"
    exit 1
}

[ "$1" = "" ] && Usage
[ `${FSLDIR}/bin/imtest $1` = 0 ] && Usage

IPOPTS=""
if [ "$4" != "" ] ; then
    IPOPTS="-kernel gauss $2 -fmean -bptf $3 $4"
fi

IN=`${FSLDIR}/bin/remove_ext $1`
TMP=`${FSLDIR}/bin/tmpnam /tmp/estnoise`

# create mask for valid voxels above 20% threshold and erode a little to avoid edge voxels
${FSLDIR}/bin/fslmaths $IN -thrp 20 -Tmin -bin -ero -ero ${TMP}_mask -odt char

# do basic spatiotemporal filtering
${FSLDIR}/bin/fslmaths $IN $IPOPTS -mas ${TMP}_mask $TMP -odt float

# create temporal mean image
${FSLDIR}/bin/fslmaths $TMP -Tmean ${TMP}_mean

# create AR(1) coefficient image
${FSLDIR}/bin/fslmaths $TMP -sub ${TMP}_mean -Tar1 -mas ${TMP}_mask ${TMP}_ar1

# create noise image: masked temporal std image, * 100, divide by mean
${FSLDIR}/bin/fslmaths $TMP -Tstd -mas ${TMP}_mask -mul 100 -div ${TMP}_mean ${TMP}_noise

# get median non-background value from noise and ar1 images
noise=`${FSLDIR}/bin/fslstats ${TMP}_noise -P 50`
ar=`${FSLDIR}/bin/fslstats ${TMP}_ar1 -P 50`
echo $noise $ar

# cleanup
/bin/rm ${TMP}*

